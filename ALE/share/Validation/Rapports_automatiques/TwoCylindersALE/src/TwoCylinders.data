# Fluid annulus region confined between an inner wall moving with an harmonic motion and an outer wall fixed #
# Hydraulique 2D laminar with ALE #
# PARALLEL ONLY 4 #

dimension 2

Pb_hydraulique_ALE pb
Domaine_ALE dom

# BEGIN MESH #
# Read_med family_names_from_group_names dom MeshWithTwoCylinders MeshWithTwoCylinders.med #
# END MESH #


# BEGIN PARTITION
Partition dom
{
	Partition_tool metis { Nb_parts 2 }
	Larg_joint 2
	zones_name DOM
}
End
 END PARTITION #

# BEGIN SCATTER #
Scatter DOM.Zones dom
# END SCATTER #

# For the Arbitrary Lagrangian-Eulerian framework: block to indicate the number of mobile 
boundaries of the domain and specify the speed that must be imposed on them #
Imposer_vit_bords_ALE dom
{
	1 # number of mobile boundaries  #
	CircleA Champ_front_ALE 2 0.01*0.06327167604329844*cos(0.06327167604329844*t) 0.0 # name and speed of the border #
}

# Solver used to solve the system giving the moving mesh velocity #
Solver_moving_mesh_ALE dom { Petsc Cholesky {  } } 

# I select a discretization #
VEFPreP1B ma_discretisation


# Time scheme, choice between: explicit or implicit #
Scheme_euler_implicit mon_schema
Read mon_schema
{
 	# Time step #
        # Initial time [s] #
        tinit 0.
	# Min time step #
        dt_min 1.e-15
	# Output criteria #
        # .out files printing period #
        dt_impr 5.e-8
	# .sauv files printing period #
        dt_sauv 100.
 	# facsec such as dt = facsec * min(dt(CFL),dt_max) ; for explicit scheme facsec <= 1. By default facsec equals to 1 #
	facsec 1
        facsec_max 1
	solveur implicite_ALE
	{
          solveur gmres { diag seuil 1.e-12 nb_it_max 3 } 
	}
	# Stop if one of the following criteria is checked: #
        # End time [s] #
	tmax 496.5
	# Max number of time steps #
         nb_pas_dt_max 2 
        # Convergence threshold (see .dt_ev file) #
	seuil_statio 1.e-15
}

# I define a medium #
Fluide_Incompressible milieu
Read milieu
{
	mu Champ_Uniforme 1 1.007e-3
	rho Champ_Uniforme 1 1000
}

# Gravity vector definition 
Uniform_field my_gravity
Read my_gravity 2 0.0 0.0 #

# Association between the different objects #
Associate pb dom
Associate pb mon_schema
Associate pb milieu
Discretize pb ma_discretisation

Read pb
{
	Navier_Stokes_standard_ALE
	{
		# Pressure matrix solved with #
 		solveur_pression petsc cholesky { }
		# Two operators are defined #
		convection {  ALE { muscl } } # A convective scheme for ALE framework : choice between: amont and muscl  #
		diffusion { }
		# Uniform initial condition for velocity #
		initial_conditions {
			vitesse Champ_Uniforme 2 0. 0.
			}
		# Boundary conditions #
		boundary_conditions {
			CircleA  frontiere_ouverte_vitesse_imposee Champ_front_ALE 2 0.01*0.06327167604329844*cos(0.06327167604329844*t) 0.0 # mobile bord in ALE framework #
			CircleB  paroi_fixe
		}
	}
	Post_processing
	{
          Definition_champs
		{
                    FPX_dom Interpolation { 
				localisation faces
				Domaine dom	
				source Morceau_equation {
			 		type operateur numero 2 option flux_bords compo 0
					source refChamp { Pb_champ pb vitesse }
				}
			}
		FPY_dom Interpolation { 
				localisation faces
				Domaine dom	
				source Morceau_equation {
			 		type operateur numero 2 option flux_bords compo 1
					source refChamp { Pb_champ pb vitesse }
				}
			}

		FVX_dom Interpolation { 
				localisation faces
				Domaine dom	
				source Morceau_equation {
			 		type operateur numero 0 option flux_bords compo 0
					source refChamp { Pb_champ pb vitesse }
				}
			}

		FVY_dom Interpolation { 
				localisation faces
				Domaine dom	
				source Morceau_equation {
			 		type operateur numero 0 option flux_bords compo 1
					source refChamp { Pb_champ pb vitesse }
				}
			}


		FX_vect_dom     transformation    {
						localisation faces
						methode formule
				                expression 1 FVX_dom+FPX_dom
				                sources_reference    { FVX_dom , FPX_dom } 
				                }
		FY_vect_dom     transformation    {
						localisation faces
				                methode  formule
				                expression 1 FVY_dom+FPY_dom
				                sources_reference    { FVY_dom , FPY_dom } 
				                }


		F_vect_dom    transformation    {
						localisation faces
				                methode vecteur
				                expression 2 FX_vect_dom FY_vect_dom
				                sources_reference    { FX_vect_dom , FY_vect_dom } 
				                }
                Fluid_Force_CircleA Reduction_0D { 
					methode sum
					source Extraction { 
							domaine dom_boundaries_CircleA nom_frontiere CircleA methode trace  
							sources_reference { F_vect_dom } 
                                        }
                                }

              Fluid_Force_CircleB Reduction_0D { 
					methode sum
					source Extraction { 
							domaine dom_boundaries_CircleB nom_frontiere CircleB methode trace  
							sources_reference { F_vect_dom } 
                                        }
                                }

                }

		# Probes #
		Probes
		{  			
                       sonde_fluid_force_circleA Fluid_Force_CircleA periode 1 numero_elem_sur_maitre 1	
                       sonde_fluid_force_circleB Fluid_Force_CircleB periode 1 numero_elem_sur_maitre 1			
		}
		# Fields #
		format lata 
		fields dt_post 100
		{
			pression_pa som
			vitesse som
                        ALEMeshVelocity som
			ALEMeshTotalDisplacement som
		}
	} 
}
# The problem is solved with #
Solve pb

# Not necessary keyword to finish #
End

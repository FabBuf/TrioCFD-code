#!/bin/bash
# Ce script est execute avant de lancer les cas tests

declare -A schemes=( ["EULER"]="euler_explicit" ["RK3"]="RK3_FT")
list_n="1 5 10 20 50 100"
for fold in "01_PHI" "02_PSI_NO_POISSON_SOLVER" "03_PSI_AND_POISSON_SOLVER" "04_PHI_AND_PSI"
do
   echo "********* $fold *********"
   mkdir -p $fold
   if [ $fold == "01_PHI" ] ; then
      sed -e "/expression_variable_source/d" \
          -e "s@expression_potential_phi .*@expression_potential_phi (sin(x)+sin(y)+sin(z))*cos(t)@g" \
          -e "s@expression_p_ana .*@expression_p_ana   (sin(x)+sin(y)+sin(z))*cos(t)@g" \
          -e "s@expression_p_init .*@expression_p_init (sin(x)+sin(y)+sin(z))*cos(0.)@g" \
          -e "s@expression_vx_ana .*@expression_vx_ana 0.@g" \
          -e "s@expression_vx_init .*@expression_vx_init 0.@g" \
          -e "s@expression_vy_ana .*@expression_vy_ana 0.@g" \
          -e "s@expression_vy_init .*@expression_vy_init 0.@g" \
          -e "s@expression_vz_ana .*@expression_vz_ana 0.@g" \
          -e "s@expression_vz_init .*@expression_vz_init 0.@g" \
	     template.data > $fold/template.data
   elif [ $fold == "02_PSI_NO_POISSON_SOLVER" ] ; then
      sed -e "s@expression_potential_phi .*@disable_solveur_poisson@g" \
          -e "/expression_potential_phi/d" \
          -e "s@expression_variable_source_x .*@expression_variable_source_x (-cos(x)*sin(y))*cos(t)@g" \
          -e "s@expression_variable_source_y .*@expression_variable_source_y (-sin(y)*sin(z)+sin(x)*cos(y))*cos(t)@g" \
          -e "s@expression_variable_source_z .*@expression_variable_source_z (-cos(y)*cos(z))*cos(t)@g" \
          -e "s@expression_p_ana .*@expression_p_ana   0.@g" \
          -e "s@expression_p_init .*@expression_p_init 0.@g" \
          -e "s@expression_vx_ana .*@expression_vx_ana (-cos(x)*sin(y))*sin(t)@g" \
          -e "s@expression_vx_init .*@expression_vx_init 0.@g" \
          -e "s@expression_vy_ana .*@expression_vy_ana (-sin(y)*sin(z)+sin(x)*cos(y))*sin(t)@g" \
          -e "s@expression_vy_init .*@expression_vy_init 0.@g" \
          -e "s@expression_vz_ana .*@expression_vz_ana (-cos(y)*cos(z))*sin(t)@g" \
          -e "s@expression_vz_init .*@expression_vz_init 0.@g" \
	     template.data > $fold/template.data
   elif [ $fold == "03_PSI_AND_POISSON_SOLVER" ] ; then
      sed -e "/expression_potential_phi/d" \
          -e "s@expression_variable_source_x .*@expression_variable_source_x (-cos(x)*sin(y))*cos(t)@g" \
          -e "s@expression_variable_source_y .*@expression_variable_source_y (-sin(y)*sin(z)+sin(x)*cos(y))*cos(t)@g" \
          -e "s@expression_variable_source_z .*@expression_variable_source_z (-cos(y)*cos(z))*cos(t)@g" \
          -e "s@expression_p_ana .*@expression_p_ana   0.@g" \
          -e "s@expression_p_init .*@expression_p_init 0.@g" \
          -e "s@expression_vx_ana .*@expression_vx_ana (-cos(x)*sin(y))*sin(t)@g" \
          -e "s@expression_vx_init .*@expression_vx_init 0.@g" \
          -e "s@expression_vy_ana .*@expression_vy_ana (-sin(y)*sin(z)+sin(x)*cos(y))*sin(t)@g" \
          -e "s@expression_vy_init .*@expression_vy_init 0.@g" \
          -e "s@expression_vz_ana .*@expression_vz_ana (-cos(y)*cos(z))*sin(t)@g" \
          -e "s@expression_vz_init .*@expression_vz_init 0.@g" \
	     template.data > $fold/template.data
   else
      sed -e "s@expression_potential_phi .*@expression_potential_phi (sin(x)+sin(y)+sin(z))*cos(t)@g" \
          -e "s@expression_p_ana .*@expression_p_ana   (sin(x)+sin(y)+sin(z))*cos(t)@g" \
          -e "s@expression_p_init .*@expression_p_init (sin(x)+sin(y)+sin(z))*cos(0.)@g" \
          -e "s@expression_variable_source_x .*@expression_variable_source_x (-cos(x)*sin(y))*cos(t)@g" \
          -e "s@expression_variable_source_y .*@expression_variable_source_y (-sin(y)*sin(z)+sin(x)*cos(y))*cos(t)@g" \
          -e "s@expression_variable_source_z .*@expression_variable_source_z (-cos(y)*cos(z))*cos(t)@g" \
          -e "s@expression_vx_ana .*@expression_vx_ana (-cos(x)*sin(y))*sin(t)@g" \
          -e "s@expression_vx_init .*@expression_vx_init 0.@g" \
          -e "s@expression_vy_ana .*@expression_vy_ana (-sin(y)*sin(z)+sin(x)*cos(y))*sin(t)@g" \
          -e "s@expression_vy_init .*@expression_vy_init 0.@g" \
          -e "s@expression_vz_ana .*@expression_vz_ana (-cos(y)*cos(z))*sin(t)@g" \
          -e "s@expression_vz_init .*@expression_vz_init 0.@g" \
	     template.data > $fold/template.data
   fi
   cd $fold
   for sch in "${!schemes[@]}"
   do
      echo "${schemes[$sch]}"
      for n in $list_n
      do
         echo -n "Niveau $n "
         mkdir -p $sch/Niv$n
         nit=`echo 500/$n+1|bc`
         dt=`echo 0.002*$n|bc` # Soit un tfin de 1.0s
         echo " ${schemes[$sch]} $nit $dt"
         sed -e "s/time_scheme .*/  time_scheme ${schemes[$sch]} /g" \
             -e "s/nb_pas_dt_max .*/  nb_pas_dt_max $nit /g" \
             -e "s/timestep .*/  timestep $dt /g" template.data > ${sch}/Niv${n}/calcul.data
      done
   done
   \cp -f ../post_run EULER/Niv5/
   \cp -f ../post_run RK3/Niv5/
   cd ..
done
echo "********* End of prepare *********"


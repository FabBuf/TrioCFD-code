Parametres {
	Titre "Statistiques par plan : Calcul des derivees (IJK_FT diphasique)"
	Description "On impose une solution analytique pour P et les composantes de vitesse."  <<EOF
Puis on fait un pas de temps, sans solveur. 
Et on calcule les grads dans les stats.

Pour la solution initiale, on impose : 
$$ P = P_m (1+A cos(2 \pi x/ L_x+\phi_x)) (1+B cos(2 \pi y/L_y+\phi_y)) (1+C cos(\pi z/L_z))+(K_p) $$
$$ U = U_m (1+D cos(2 \pi x/ L_x+\phi_x)) (1+E cos(2 \pi y/L_y+\phi_y)) sin(\pi z/L_z)+(K_u) $$
$$ V = V_m (1+D cos(2 \pi x/ L_x+\phi_x)) (1+E cos(2 \pi y/L_y+\phi_y)) sin(\pi z/L_z)+(K_u) $$
$$ W = W_m (1+D cos(2 \pi x/ L_x+\phi_x)) (1+E cos(2 \pi y/L_y+\phi_y)) sin(\pi z/L_z)+(K_u) $$

avec pour respecter les conditions de periodicite et de vitesse nulle aux parois : 
$$ K_u=0.   K_v=0.   K_w=0. $$

Ce champ ne verifie pas divu=0. Pour valeurs numeriques, on prend : 

A=B=C=D=E=1

Lx=2.
Ly=3.
Lz=5.

Pm=8.
Um=10.
Vm=7.
Wm=3.

Kp=-1

phix=0.
phiy=0.

Les solutions analytiques des gradients et seconds gradients sont calcules et fournis dans le jdd. Les champs sont
post-traites grace au mot cle check_stats. L'erreur entre le champ analytique et le gradient calcule par le code est
calculee par visit (en norme Lmax ou L2). Les resultats sont resumes dans cette fiche. Tous les premiers gradients
sont evalues au deuxieme ordre.   Les interpolations etant toujours centrees, elles sont d'ordre 2 :  
$$ \hat{\phi}_i = \frac{\phi_{i+1}+\phi_i}{2} + \Delta^2 f" + \mathcal{O}(h^4) $$

Le gradient de Pression est evalue aux faces (comme le champ de vitesse) a partir de la pression aux elements. La
condition de periodicite est utilise en (xy). Selon z, aux parois, le gradient est suppose nul.  

Le second gradient de pression est construit a partir du gradient aux faces. Il est evalue au centre des elems, en
utilisant eventuellement des interpolations si necessaire (pour les croises).

Statistiques_dns_ijk::face_to_cell_gradient
Option bc_type = 0 : pour la vitesse, suppose une valeur nulle au bord (inusite en diphasique). 
               = 1 : pour le grad P, suppose une valeur au bord egale a celle au centre de la derniere cellule.
	             Mais pas tout a fait... 

Les gradients sont calcules a partir des 2 voisins separes de h ou 2h selon la direction sauf pour les premieres et
dernieres derivees en z (u denote ici une compo de gradP) : 
$$ \\frac{\\partial u}{\\partial z} = \\frac{-4u_m + 3u_c +u_p}{3\Delta z} $$ pour le bord gauche, avec $u_m = 0$
$$ \\frac{\\partial u}{\\partial z} = \\frac{-u_m - 3u_c +4u_p}{3\Delta z} $$ pour le bord en z+, avec $u_p = 0$
ou les indices m, c, p designe : plus, centre et moins resp.

Pour la vitesse, on a besoin de calculer le gradient a l'avance dans une premiere boucle pour pouvoir calculer les
gradients doubles (croises) dans un deuxieme temps. Pour le gradient de vitesse, on calcule : 

Statistiques_dns_ijk::compute_and_store_gradU_cell

--> Cette methode contient les memes formules que face_to_cell_gradient(bc_type = 0), mais ne calcule pas autant de
gradient et stocke ce qu'elle calcule dans un champ. 

Les gradients sont calcules a partir des 2 voisins separes de h ou 2h selon la direction sauf pour les premieres et
dernieres derivees en z : 
$$ \\frac{\\partial u}{\\partial z} = \\frac{-4u_m + 3u_c +u_p}{3\Delta z} $$ pour le bord gauche, avec $u_m = 0$
$$ \\frac{\\partial u}{\\partial z} = \\frac{-u_m - 3u_c +4u_p}{3\Delta z} $$ pour le bord en z+, avec $u_p = 0$
ou les indices m, c, p designe : plus, centre et moins resp.

Il ne reste plus que le second gradient de vitesse a calculer.
Une partie et calcule dans Statistiques_dns_ijk::calculer_gradients_vitesse qui recalcule inutilement les premiers
gradients de vitesse. Les derivees secondes droites (dxx ou dyy ou dzz) sont evaluees comme ceci : 
$$  ddukdxx = (We_pi - 2*We_ci + We_mi ) / dx2 $$
sauf pres des bords en z ou un schema decentre conduit a : 
$$     dduidzz = (4*Ue_pk - 12*Ue_ck + 8*Ue_mk ) / (3*dz2) $$ pour le bord gauche;
$$     dduidzz = (8*Ue_pk - 12*Ue_ck + 4*Ue_mk ) / (3*dz2) ;$$ pour le bord droit;

Une autre methode evalue simplement par difference centree les autres composantes : 

Statistiques_dns_ijk::cell_to_cell_gradient(i,j,k, \\
			      field_dudx, field_dvdy, field_dwdx, \\
			      field_dudz, field_dvdz, field_dwdz,  \\
			      /* Et les outputs en ref aussi!! */ \\
			      ddUdxdy, ddUdxdz, ddUdydz,  \\
			      ddVdxdy, ddVdxdz, ddVdydz,  \\
			      ddWdxdy, ddWdxdz, ddWdydz);

L'astuce est de ne pas calculer a ce niveau de derivee en z pour eviter le traitement difficile des conditions aux
limite. 

RESULTATS : 
Tous les premiers gradients sont d'ordre 2. 

Pour la pression, les seconds gradients sont tous au second ordre, y compris les deux evaluations equivalentes des croisees d(dPdx)dz
ou d(dPdz)dx et d(dPdy)dz ou d(dPdz)dy (regle de schwartz).

Les seconds gradients de vitesse sont aussi au second ordre sauf les derivees secondes en z qui sont a l'ordre 1 (effet du pas
variable a la condition limite de bord, d(dUdz)dz, d(dVdz)dz et d(dWdz)dz au bord).  

On verifie aussi que les EV sont a jours en checkant que l'erreur en parralelle est la meme qu'en sequentiel pour un maillage N=40
bi-decoupe dans toutes les directions. 

En integrant les solutions analytiques par plans, on obtient de profils de reference a comparer au fichier statistiques
monophasique_moyenne_spatiale_XXX.txt.

EOF
	Auteur "G.B."
	CasTest N5/P111_U11 ijkft_stat_diph_gradUP.data
	CasTest N10/P111_U11 ijkft_stat_diph_gradUP.data
	CasTest N20/P111_U11 ijkft_stat_diph_gradUP.data
	CasTest N40/P111_U11 ijkft_stat_diph_gradUP.data
	CasTest N40/P111_U11 ijkft_stat_diph_gradUP_par8.data 8
	CasTest N80/P111_U11 ijkft_stat_diph_gradUP_par8.data 8
#	Prerequisite sh ./prereq_reprise.sh #
	CasTest N80/P111_U11/R ijkft_stat_diph_gradUP_par8.data 8
	Prerequisite visit -nowin -cli -s ./post_visit.py P 
	Prerequisite visit -nowin -cli -s ./post_visit.py U
	Prerequisite visit -nowin -cli -s ./post_visit.py V
	Prerequisite visit -nowin -cli -s ./post_visit.py W
#	Prerequisite ./post_visit.py #
}
#Pmacro CHAPTER(@VAR_NAME@,@X@, @TEXT@)
Chapitre {
	Titre "Validation des derivees pour la @VAR_NAME@"
	Description "@TEXT@"
#Pforeach @NORM@(max L2)
        Figure {
                Titre "Derivees (premieres) de la @VAR_NAME@"
                incluredesccourbes 0
                logX
		logY
		labelX  "Nx"
                labelY  "Erreur @NORM@"
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 ($2)
                        style linespoints
                        Legende "d@X@dx"
                }
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 ($3)
                        style linespoints
                        Legende "d@X@dy"
                }
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 ($4)
                        style linespoints
                        Legende "d@X@dz"
                }
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 (100.*$1**-2)
                        style lines
                        Legende "ordre 2"
                }
	}
        Figure {
                Titre "Derivees (secondes) de la @VAR_NAME@"
                incluredesccourbes 0
                logX
		logY
		labelX  "Nx"
                labelY  "Erreur @NORM@"
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 ($5)
                        style linespoints
                        Legende "dd@X@dd_X"
                }
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 ($6)
                        style linespoints
                        Legende "dd@X@dd_Y"
                }
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 ($7)
                        style linespoints
                        Legende "dd@X@dd_Z"
                }
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 ($8)
                        style linespoints
                        Legende "dd@X@dxdy"
                }
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 ($9)
                        style linespoints
                        Legende "dd@X@dxdz"
                }
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 ($10)
                        style linespoints
                        Legende "dd@X@dydz"
                }
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 (10.*$1**-1)
                        style lines
                        Legende "ordre 1"
                }
                courbe {
                        fichier cvg_@X@_@NORM@.txt
                        colonnes $1 (100.*$1**-2)
                        style lines
                        Legende "ordre 2"
                }
	}
#Pendforeach(@NORM@)
}
#Pendmacro(CHAPTER)
#Pusemacro(CHAPTER)(pression,P,on doit trouver du second ordre)
#Pusemacro(CHAPTER)(vitesse U,U,on doit trouver du second ordre (sauf ddUdzdz))
#Pusemacro(CHAPTER)(vitesse V,V,on doit trouver du second ordre (sauf ddVdzdz))
#Pusemacro(CHAPTER)(vitesse W,W,on doit trouver du second ordre (sauf ddWdzdz))


#Pmacro FIGURE(@VAR_NAME@,@VAR@, @COL@, @SOLANA@)
        Figure {
                Titre "Moyenne instantanee plan (xy) de @VAR_NAME@"
                incluredesccourbes 0
		labelX  "z"
                labelY  "@VAR@"
                courbe {
                        fichier N80/P111_U11/monophasique_moyenne_spatiale_0.000155.txt
                        colonnes $1 @COL@
                        style linespoints
                        Legende "Calcul N80"
                }
                courbe {
                        Fonction (@SOLANA@)
                        style lines
                        Legende "ref"
                }
	}
#Pendmacro(FIGURE)

#Pmacro FIGURECOMP(@VAR_NAME@,@VAR@, @COL_LIST@)
        Figure {
                Titre "Moyenne instantanee plan (xy) de @VAR_NAME@"
                incluredesccourbes 0
		labelX  "z"
                labelY  "@VAR@"
#Pforeach @COL@(@COL_LIST@)
                courbe {
                        fichier N80/P111_U11/monophasique_moyenne_spatiale_0.000155.txt
                        colonnes $1 @COL@
                        style linespoints
                        Legende "Col @COL@"
                }
#Pendforeach(@COL@)
                courbe {
                        fichier N80/P111_U11/monophasique_moyenne_spatiale_0.000155.txt
                        Fonction 0.
                        style lines
                        Legende "ref"
                }
	}
#Pendmacro(FIGURECOMP)

Chapitre {
	Titre "Verification des moyennes par plan"
	Description "Comparaison de la valeur dans le fichier monophasique_moyenne_spatiale_0.000155.txt" <<EOF
a la solution analytique. On verifie que le calcul et la ref se superposent. 
Comme il y a trop de stats, on n'en verifie que quelques une.
On pourrait poursuivre au dela de colonne 180 : IWdPdx... 
mais je trouve que ca fait trop de courbes...


EOF
	
#Pusemacro(FIGURE)(la vitesse U,Ul, 3, 10.*sin(pi*x/5))
#Pusemacro(FIGURE)(la vitesse V,Vl, 4,  7.*sin(pi*x/5))
#Pusemacro(FIGURE)(la vitesse W,Wl, 5,  3.*sin(pi*x/5))
#Pusemacro(FIGURE)(la pression,P, 6, 8*(1+cos(pi*x/5))-1)
#Pusemacro(FIGURE)(la correlation UU,UUl, 11, 10.*sin(pi*x/5)*10.*sin(pi*x/5)*9./4.)
#Pusemacro(FIGURE)(la correlation UV,UVl, 14, 10.*sin(pi*x/5)*7.*sin(pi*x/5)*9./4.)
#Pusemacro(FIGURE)(la correlation UW,UWl, 16, 10.*sin(pi*x/5)*3.*sin(pi*x/5)*9./4.)
#Pusemacro(FIGURE)(la correlation UUU,UUUl, 17, (10.*sin(pi*x/5))**3*5./2.*5./2.)
#Pusemacro(FIGURE)(la correlation UP ,UP, 27, 10.*8.*9./4.*(1+cos(pi*x/5))*sin(pi*x/5)-10.*sin(pi*x/5))
#Pusemacro(FIGURECOMP)(derivees de la vitesse selon x ou y,dUidx ou dUidy,72 73 74 75 76 77)
#Pusemacro(FIGURE)(la derivee dUdz,dUdz, 78, 10.*pi/5.*cos(pi*x/5))
#Pusemacro(FIGURE)(la derivee dVdz,dVdz, 79,  7.*pi/5.*cos(pi*x/5))
#Pusemacro(FIGURE)(la derivee dWdz,dWdz, 80,  3.*pi/5.*cos(pi*x/5))
#Pusemacro(FIGURE)(du correlation PdUdz,PdUdz, 87,  10.*8.*9./4.*(1+cos(pi*x/5))*pi/5.*cos(pi*x/5)-10.*pi/5.*cos(pi*x/5))
#Pusemacro(FIGURE)(la correlation PdWdz,PdWdz, 89,  3.*8.*9./4.*(1+cos(pi*x/5))*pi/5.*cos(pi*x/5)-3.*pi/5.*cos(pi*x/5))
#Pusemacro(FIGURECOMP)(la derivee dPdx ou dPdy ou VdPdx ou VdPdy,dPdx ou dPdy ou VdPdx ou VdPdy, 171 172 177 178)
#Pusemacro(FIGURE)(la derivee dPdz,dPdz, 173, -8*pi/5.*sin(pi*x/5.))
#Pusemacro(FIGURE)(la derivee VdPdz,VdPdz, 179, -2*7*9*pi/5*sin(pi*x/5.)*sin(pi*x/5.))
# P =  8.*(1+1*cos(3.141592653589793*x))*(1+1*cos(2.*3.141592653589793*y/3.+0.))*(1+1*cos(3.141592653589793*z/5.))
#  vy_dPdz 7.*8.*(1+cos(3.141592653589793*x))*(1+cos(3.141592653589793*x))
#               *(1+cos(2.*3.141592653589793*y/3.))*(1+cos(2.*3.141592653589793*y/3.))
#               *sin(pi*z/5.)*(-pi/5.*sin(pi*z/5.))

}

Chapitre {
	Titre "Reprise"
	Description "Verification de la reprise" <<EOF
On check simplement qu'il y ait 2 lignes dans le tableau.
On n'affiche que les 9 premieres colonnes (il n'en a que 9).
EOF

         Table {
                 Title "fichier reprise acceleration.out"
                 description "The table below headlines of the *acceleration.out file."
                 description " "

                 nb_columns 8
                 Label  time|Vx|rhoVx|tauw|da/dt|NewT|acceleration|fac_var_source
                 lines {
                            nb_columns_file 9
                            file ./N80/P111_U11/R/ijkft_stat_diph_gradUP_par8_acceleration.out
                       }
         }
}

